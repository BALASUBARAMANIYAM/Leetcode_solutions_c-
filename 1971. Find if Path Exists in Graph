class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int dest) {
        // Create an adjacency list from the edge list
        vector<vector<int>> adj(n);
        for (const auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);  // Undirected graph, so add both directions
        }
        
        vector<int> vis(n, 0);
        queue<int> q;
        q.push(source);
        vis[source] = 1;  // Mark the source as visited
        
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            
            if (node == dest)  // If we reach the destination, return true
                return true;
            
            // Traverse all neighbors of the current node
            for (int neighbor : adj[node]) {
                if (!vis[neighbor]) {
                    vis[neighbor] = 1;  // Mark the neighbor as visited
                    q.push(neighbor);    // Push the neighbor into the queue
                }
            }
        }
        
        return false;  // If the queue is empty and we haven't reached dest, return false
    }
};
