class Solution {
public:
    int help(TreeNode* node, int& maxi) {
        if (node == NULL)
            return 0;

        // Recursively find the height of left and right subtrees
        int lh = help(node->left, maxi);
        int rh = help(node->right, maxi);

        // Update the diameter (maxi) using the sum of left and right subtree heights
        maxi = max(maxi, lh + rh);

        // Return the height of the current node
        return 1 + max(lh, rh);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        int maxi = 0;  // Initialize the diameter as 0
        help(root, maxi);  // Compute the diameter
        return maxi;  // Return the computed diameter
    }
};
