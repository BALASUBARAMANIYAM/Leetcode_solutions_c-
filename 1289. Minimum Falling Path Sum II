class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& mat) {
        if(mat.size() == 0) return 0;
        
        int n = mat.size();
        // Create a DP table to store the minimum falling path sums
        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));

        // Initialize the first row of dp with the first row of mat
        for (int i = 0; i < n; i++) {
            dp[0][i] = mat[0][i];
        }

        // Fill the dp table for all subsequent rows
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    // Only update dp[i][j] if we are picking a different column in the previous row
                    if (j != k) {
                        dp[i][j] = min(dp[i][j], mat[i][j] + dp[i-1][k]);
                    }
                }
            }
        }

        // Find the minimum value in the last row of the dp table
        int mini = INT_MAX;
        for (int i = 0; i < n; i++) {
            mini = min(mini, dp[n-1][i]);
        }

        return mini;
    }
};
//time complexit  = n^3;
---------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        if (n == 0) return 0;
        
        // DP array to store minimum path sum for each column
        vector<int> dp = grid[0];  // Initialize dp with the first row

        for (int i = 1; i < n; ++i) {
            int min1 = INT_MAX, min2 = INT_MAX, min1_idx = -1;
            
            // Find the minimum and second minimum values in the previous row
            for (int j = 0; j < n; ++j) {
                if (dp[j] < min1) {
                    min2 = min1;
                    min1 = dp[j];
                    min1_idx = j;
                } else if (dp[j] < min2) {
                    min2 = dp[j];
                }
            }

            // Update the current row using min1 and min2
            vector<int> new_dp(n);
            for (int j = 0; j < n; ++j) {
                // If the minimum value comes from the same column, use the second minimum
                if (j == min1_idx) {
                    new_dp[j] = grid[i][j] + min2;
                } else {
                    new_dp[j] = grid[i][j] + min1;
                }
            }
            
            dp = new_dp;  // Move to the next row
        }

        // The result is the minimum value in the last row
        return *min_element(dp.begin(), dp.end());
    }
};

//Time complexity O(n^2);

