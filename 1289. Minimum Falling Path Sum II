class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& mat) {
        if(mat.size() == 0) return 0;
        
        int n = mat.size();
        // Create a DP table to store the minimum falling path sums
        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));

        // Initialize the first row of dp with the first row of mat
        for (int i = 0; i < n; i++) {
            dp[0][i] = mat[0][i];
        }

        // Fill the dp table for all subsequent rows
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    // Only update dp[i][j] if we are picking a different column in the previous row
                    if (j != k) {
                        dp[i][j] = min(dp[i][j], mat[i][j] + dp[i-1][k]);
                    }
                }
            }
        }

        // Find the minimum value in the last row of the dp table
        int mini = INT_MAX;
        for (int i = 0; i < n; i++) {
            mini = min(mini, dp[n-1][i]);
        }

        return mini;
    }
};
//time complexit  = n^3;
---------------------------------------------------------------------------------------------------------------

