class Solution
{
public:

    void dfs(vector<int> adj[], int i, vector<int>& vis, vector<int>& ans)
    {
        vis[i] = 1;  // Mark the current node as visited
        for (int j = 0; j < adj[i].size(); j++)
        {
            if (vis[adj[i][j]] == 0)
            {
                dfs(adj, adj[i][j], vis, ans);
            }
        }
        // Once all the adjacent nodes are processed, push the current node to the result stack
        ans.push_back(i);
    }
    
    vector<int> topoSort(int V, vector<int> adj[]) 
    {
        vector<int> ans;  // This will store the topological order
        vector<int> vis(V, 0);  // Initialize the visited array
        
        for (int i = 0; i < V; i++)
        {
            if (vis[i] == 0)
            {
                dfs(adj, i, vis, ans);
            }
        }
        
        // The result vector has to be reversed to get the correct topological order
        reverse(ans.begin(), ans.end());
        return ans;
    }
};
