
class Solution {
public:
    // Reverse the linked list
    ListNode* reverse(ListNode *head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while (curr != nullptr) {
            ListNode* nextNode = curr->next;  // Save the next node
            curr->next = prev;    // Reverse the current node's pointer
            prev = curr;          // Move prev to current node
            curr = nextNode;      // Move to the next node
        }
        return prev;  // prev will be the new head of the reversed list
    }

    // Compare two linked lists
    bool check(ListNode* head1, ListNode* head2) {
        while (head1 != nullptr && head2 != nullptr) {
            if (head1->val != head2->val) {
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
        return true;
    }

    // Find the middle of the list
    ListNode* mid(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    // Check if the linked list is a palindrome
    bool isPalindrome(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return true;  // A single node or empty list is always a palindrome
        }

        // Find the middle of the list
        ListNode* middle = mid(head);
        
        // Reverse the second half of the list
        ListNode* secondHalfStart = reverse(middle);
        
        // Compare the first half with the reversed second half
        ListNode* firstHalfStart = head;
        bool result = check(firstHalfStart, secondHalfStart);
        
        // Restore the original list (reverse the second half back)
        reverse(secondHalfStart);

        return result;
    }
};
