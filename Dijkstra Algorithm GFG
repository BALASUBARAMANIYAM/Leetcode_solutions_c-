class Solution
{
public:
    // Function to find the shortest distance of all the vertices
    // from the source vertex S.
    vector<int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        if (V == 0)
            return {};
        if (V == 1)
            return {0};
        
        vector<int> dis(V, INT_MAX);
        dis[S] = 0; // Corrected from `==` to `=`
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, S});
        
        while (!pq.empty())
        {
            int node = pq.top().second;
            int distance = pq.top().first;
            pq.pop();
            
            // If the distance is already more than the recorded distance, skip
            if (distance > dis[node])
                continue;
            
            for (const auto& it : adj[node])
            {
                int new_node = it[0];
                int new_dis = it[1];
                if (dis[new_node] > distance + new_dis)
                {
                    dis[new_node] = distance + new_dis;
                    pq.push({dis[new_node], new_node}); // Added missing semicolon
                }
            }
        }
        return dis;
    }
};
