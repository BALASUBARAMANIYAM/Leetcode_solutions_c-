//reecursion
#include <bits/stdc++.h> 
bool check(vector<int>& arr,int n,int tar)
{
     if(tar==0)
     return true;
     if(n==0)
     return arr[n]==tar;

     bool nottake=check(arr,n-1,tar);
     bool take=false;
     if(tar>=arr[n])
     {
         take=check(arr,n-1,tar-arr[n]);
     }
     return take || nottake;

}
bool subsetSumToK(int n, int k, vector<int> &arr) {
   return check(arr,n-1,k);

}

//using DP

#include <bits/stdc++.h> 
bool subsetSumToK(int n, int k, vector<int> &arr) {
   vector<vector<bool>> dp(n+1, vector<bool>(k+1, false));


     for (int i = 0; i <= n; i++) {
        dp[i][0] = true;
    }

    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=k;j++)
        {
            dp[i][j]=dp[i-1][j];
            if(j>=arr[i-1])
            {
                dp[i][j]=dp[i][j] || dp[i-1][j-arr[i-1]];
            }
        }
    }

    return dp[n][k];
}
