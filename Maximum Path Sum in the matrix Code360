#include <bits/stdc++.h>
using namespace std;

int getMaxPathSum(vector<vector<int>> &mat) {
    if (mat.empty()) return 0;

    int n = mat.size();
    int m = mat[0].size();
    vector<vector<int>> dp(n, vector<int>(m, 0));

    // Initialize the first row of dp with the first row of mat
    for (int i = 0; i < m; i++) {
        dp[0][i] = mat[0][i];
    }

    // Fill the dp table
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int up = dp[i-1][j] + mat[i][j];
            int ld = (j-1 >= 0) ? dp[i-1][j-1] + mat[i][j] : INT_MIN;
            int rd = (j+1 < m) ? dp[i-1][j+1] + mat[i][j] : INT_MIN;

            dp[i][j] = max({up, ld, rd});
        }
    }

    // Find the maximum value in the last row
    int maxSum = INT_MIN;
    for (int j = 0; j < m; j++) {
        maxSum = max(maxSum, dp[n-1][j]);
    }

    return maxSum;
}
