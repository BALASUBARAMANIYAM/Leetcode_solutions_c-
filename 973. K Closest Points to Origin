
class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int, vector<int>>> maxHeap;
        vector<vector<int>> ans;

        for(auto& it : points) {
            int distance = (it[0] * it[0]) + (it[1] * it[1]);

            if(maxHeap.size() < k) {
                maxHeap.push({distance, it});
            } else if(distance < maxHeap.top().first) {
                maxHeap.pop();
                maxHeap.push({distance, it});
            }
        }

        while(!maxHeap.empty()) {
            ans.push_back(maxHeap.top().second);
            maxHeap.pop();
        }

        return ans;
    }
};
