class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if (head == NULL || head->next == NULL) {
            return NULL; // No cycle possible in an empty list or a single node list
        }
        
        ListNode *slow = head;
        ListNode *fast = head;
        
        // Step 1: Detect if there is a cycle
        while (fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
            
            if (slow == fast) {
                // There is a cycle, now find the start of the cycle
                ListNode *start = head;
                while (start != slow) {
                    start = start->next;
                    slow = slow->next;
                }
                return start; // The start of the cycle
            }
        }
        
        // No cycle detected
        return NULL;
    }
};
