class Solution {
public:
    void dfs(vector<vector<int>>& grid, int i, int j) {
        if (i < 0 || j < 0 || i >= grid.size() || j >= grid[i].size() || grid[i][j] == 1)
            return;

        grid[i][j] = 1; // Mark the cell as visited
        dfs(grid, i - 1, j); // Explore up
        dfs(grid, i + 1, j); // Explore down
        dfs(grid, i, j - 1); // Explore left
        dfs(grid, i, j + 1); // Explore right
    }

    void markBorderConnectedCells(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();

        // Check first and last rows
        for (int j = 0; j < cols; ++j) {
            if (grid[0][j] == 0)
                dfs(grid, 0, j);
            if (grid[rows - 1][j] == 0)
                dfs(grid, rows - 1, j);
        }

        // Check first and last columns
        for (int i = 0; i < rows; ++i) {
            if (grid[i][0] == 0)
                dfs(grid, i, 0);
            if (grid[i][cols - 1] == 0)
                dfs(grid, i, cols - 1);
        }
    }

    int closedIsland(vector<vector<int>>& grid) {
        if (grid.empty() || grid[0].empty())
            return 0;

        markBorderConnectedCells(grid);

        int closedIslandCount = 0;
        int rows = grid.size();
        int cols = grid[0].size();

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (grid[i][j] == 0) {
                    dfs(grid, i, j);
                    ++closedIslandCount;
                }
            }
        }

        return closedIslandCount;
    }
};
