class Solution {
  public:
   
   void dfs(vector<vector<int>>& grid,int i,int j,vector<pair<int,int>>& s,int b,int e)
   {
       if(i<0 || j<0 || i>=grid.size() || j>=grid[i].size() || grid[i][j]==0)
       return;
      
           grid[i][j]=0;
           s.push_back({i-b,j-e});
       
        dfs(grid,i+1,j,s,b,e);
         dfs(grid,i-1,j,s,b,e);
          dfs(grid,i,j-1,s,b,e);
           dfs(grid,i,j+1,s,b,e);
           return;
   }
  
    int countDistinctIslands(vector<vector<int>>& grid) {
        if(grid.size()==0)
        return 0;
        
        
        set<vector<pair<int,int>>> shape;
        
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
                vector<pair<int,int>> s;
                if(grid[i][j])
                {
                    dfs(grid,i,j,s,i,j);
                    shape.insert(s);
                }
            }
        }
        
        return shape.size();
        
    }
};
