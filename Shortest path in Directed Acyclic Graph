class Solution {
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
     
     if(N==0)
     return {};
     if(N==1)
     return {0};
     
     vector<int> dis(N,INT_MAX);
    vector<vector<pair<int, int>>> temp(N);
     dis[0]=0;
     priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
     
     pq.push({0,0});
     
     for(auto& it:edges)
     {
         temp[it[0]].push_back({it[2],it[1]});
     }
     
     while(!pq.empty())
     {
         int node=pq.top().second;
         int distance=pq.top().first;
         pq.pop();
         
         for(auto& dump: temp[node])
         {
             int new_node=dump.second;
             int new_dis=dump.first;
             
             if(dis[new_node]>new_dis+distance)
             {
                 dis[new_node]=new_dis+distance;
                 pq.push({dis[new_node],new_node});
             }
         }
     }
     for (int i = 0; i < N; ++i) {
            if (dis[i] == INT_MAX)
                dis[i] = -1; 
        }

     
     return dis;
       
    }
};
