class Solution {
public:
    void dfs(const vector<vector<int>>& edges, vector<int>& vis, int node, vector<int>& temp) {
        vis[node] = 1;
        temp.push_back(node);
        for (int neighbor : edges[node]) {
            if (vis[neighbor] == 0) {
                dfs(edges, vis, neighbor, temp);
            }
        }
    }

    int countEdges(const vector<int>& temp, const vector<vector<int>>& edges) {
        int count = 0;
        for (int node : temp) {
            for (int neighbor : edges[node]) {
                if (node < neighbor) { // To avoid counting edges twice
                    count++;
                }
            }
        }
        return count;
    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        if (n == 0) return 0;

        // Initialize graph representation
        vector<vector<int>> adj(n);
        for (const auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]); // because it's undirected
        }

        vector<int> vis(n, 0);
        int ans = 0;

        for (int i = 0; i < n; i++) {
            if (vis[i] == 0) {
                vector<int> temp;
                dfs(adj, vis, i, temp);

                int v = temp.size();
                int edgeCount = countEdges(temp, adj);
                int totalEdges = (v * (v - 1)) / 2;

                if (edgeCount == totalEdges) {
                    ans++;
                }
            }
        }
        return ans;
    }
};
