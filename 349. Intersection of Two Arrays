//Using Hash Maps
class Solution {
public:
    vector<int> intersection(vector<int>& num1, vector<int>& num2) {
        unordered_map<int,int> mp1;
        vector<int> ans;
        for(int i=0;i<num1.size();i++)
        {
           if(mp1.find(num1[i])==mp1.end())
           mp1[num1[i]]=1;
        }
         for(int i=0;i<num2.size();i++)
        {
               if(mp1[num2[i]]==1)
               {
               ans.push_back(num2[i]);
               mp1[num2[i]]++;
               }
        }
        return ans;
    }
};

//Without Using Hash Maaps

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        sort(nums1.begin(), nums1.end());  // Sort both arrays
        sort(nums2.begin(), nums2.end());
        
        int i = 0, j = 0;
        
        while (i < nums1.size() && j < nums2.size()) {
            // Skip duplicates in nums1
            if (i > 0 && nums1[i] == nums1[i - 1]) {
                i++;
                continue;
            }
            // Skip duplicates in nums2
            if (j > 0 && nums2[j] == nums2[j - 1]) {
                j++;
                continue;
            }
            // If elements are the same, add to result and move both pointers
            if (nums1[i] == nums2[j]) {
                ans.push_back(nums1[i]);
                i++;
                j++;
            } 
            // If nums1[i] is smaller, move i
            else if (nums1[i] < nums2[j]) {
                i++;
            } 
            // If nums2[j] is smaller, move j
            else {
                j++;
            }
        }
        
        return ans;
    }
};

