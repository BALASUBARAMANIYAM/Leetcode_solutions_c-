class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        if(nums.size() < 3) // if less than 3 elements, no triplet possible
            return ans;
      
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i < nums.size() - 2; i++) {
            // Skip duplicate elements to avoid duplicate triplets
            if(i > 0 && nums[i] == nums[i-1])
                continue;
            
            int j = i + 1;
            int k = nums.size() - 1;
            
            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                
                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    ans.push_back({nums[i], nums[j], nums[k]});
                    
                    // Skip duplicate elements for j and k
                    while(j < k && nums[j] == nums[j + 1]) j++;
                    while(j < k && nums[k] == nums[k - 1]) k--;
                    
                    j++;
                    k--;
                }
            }
        }
        
        return ans;
    }
};
