class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        
        // Calculate total sum
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
        }
        
        // If total sum is odd, we cannot partition into two subsets with equal sum
        if (sum % 2 != 0) return false;
        
        int half = sum / 2;
        
        // Initialize a 2D DP table
        vector<vector<bool>> dp(n+1, vector<bool>(half+1, false));
        
        // Base case: sum of 0 can always be formed
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        
        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= half; j++) {
                if (nums[i-1] > j) {
                    dp[i][j] = dp[i-1][j];  // Exclude current element
                } else {
                    dp[i][j] = dp[i-1][j] || dp[i-1][j - nums[i-1]];  // Include or exclude
                }
            }
        }
        
        // Final result: Can we partition the array into subsets with sum equal to half
        return dp[n][half];
    }
};
